permissions:
  contents: write
  pull-requests: read
  issues: read

name: Create tag and release before promotion ot QA

on:
  issue_comment:
    types: [created]

jobs:
  promote-to-qa:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/tag ')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Tag Name from comment
        id: tag
        run: |
          comment="${{ github.event.comment.body }}"
          tagname=$(echo "$comment" | awk '{print $2}')
          echo "tagname=$tagname" >> $GITHUB_OUTPUT
          echo "tagname=$tagname" >> $GITHUB_ENV    

      - name: Get PR info
        id: pr_info
        run: |
          BASE_BRANCH=$(jq -r .pull_request.base.ref < $GITHUB_EVENT_PATH)
          HEAD_BRANCH=$(jq -r .pull_request.head.ref < $GITHUB_EVENT_PATH)
          echo "base=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "head=$HEAD_BRANCH" >> $GITHUB_OUTPUT

      - name: Get latest release tag
        id: prev_release
        run: |
          PREV_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [ -z "$PREV_TAG" ]; then
            echo "No previous release found, using first commit as base"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)   # first commit hash
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new tag
        id: new_tag
        run: |
          TAG="${{ steps.tag.outputs.tagname }}"
          echo "new_tag=$TAG" >> $GITHUB_OUTPUT

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag $TAG
          git push origin $TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Notes
        run: |
          PREV=${{ steps.prev_release.outputs.prev_tag }}
          TAG=${{ steps.tag.outputs.tagname }}
          BASE=${{ steps.pr_info.outputs.base }}

          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          gh pr list \
            --state merged \
            --base ${{ steps.pr_info.outputs.base }} \
            --json number,title,author \
            --jq '.[] | ". \(.title) by @\(.author.login) in #\(.number)"' \
            >> RELEASE_NOTES.md

          echo "" >> RELEASE_NOTES.md
          echo "Full Changelog: https://github.com/${{ github.repository }}/compare/$PREV...$TAG" >> RELEASE_NOTES.md

          echo "Final release notes:" && cat RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create ${{ steps.tag.outputs.tagname }} \
            --title "Release ${{ steps.tag.outputs.tagname }}" \
            --notes-file RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ready for QA Promotion
        run: |
          echo "Now the ${{ steps.new_tag.outputs.new_tag }} is ready to promotte on QA/UAT..."
