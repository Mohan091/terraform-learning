permissions:
  contents: write
  pull-requests: read
  issues: read

name: Create tag and release before promotion to QA/UAT

on:
  issue_comment:
    types: [created]

jobs:
  promote-to-qa:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/tag ')
    runs-on: ubuntu-latest

    steps:
      - name: Get PR details
        id: prdetails
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract PR details
        id: prbranch
        run: |
          source_pr_branch="${{ fromJson(steps.prdetails.outputs.data).head.ref }}"
          target_pr_branch="${{ fromJson(steps.prdetails.outputs.data).base.ref }}"
          pr_commit="${{ fromJson(steps.prdetails.outputs.data).head.sha }}"
          pr_title="${{ fromJson(steps.prdetails.outputs.data).title }}"
          echo "source_pr_branch=$source_pr_branch" >> $GITHUB_ENV
          echo "target_pr_branch=$target_pr_branch" >> $GITHUB_ENV
          echo "pr_title=$pr_title" >> $GITHUB_ENV
          echo "pr_commit=$pr_commit" >> $GITHUB_ENV
          echo "pr_commit=$pr_commit" >> $GITHUB_OUTPUT

      - name: Checkout repo (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Tag Name from comment
        id: tag
        run: |
          comment="${{ github.event.comment.body }}"
          tagname=$(echo "$comment" | awk '{print $2}')
          echo "tagname=$tagname" >> $GITHUB_OUTPUT
          echo "tagname=$tagname" >> $GITHUB_ENV    

      - name: Get latest release tag
        id: prev_release
        run: |
          PREV_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [ -z "$PREV_TAG" ]; then
            echo "No previous release found, using first commit as base"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)   # first commit hash
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Notes
        run: |
          PREV=${{ steps.prev_release.outputs.prev_tag }}
          NEW=${{ steps.tag.outputs.tagname }}
          SHA=${{ steps.prbranch.outputs.pr_commit }}

          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Collect commits between previous tag and PR commit
          git log $PREV..$SHA --pretty=format:"- %s by %an" >> RELEASE_NOTES.md

          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV...$NEW" >> RELEASE_NOTES.md

          echo "Final release notes:" && cat RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (auto-creates tag)
        run: |
          gh release create ${{ steps.tag.outputs.tagname }} \
            --title "${{ steps.tag.outputs.tagname }}" \
            --target "${{ steps.prbranch.outputs.pr_commit }}" \
            --notes-file RELEASE_NOTES.md 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
