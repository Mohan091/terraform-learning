permissions:
  contents: write
  pull-requests: read
  issues: read

name: Create tag and release before promotion to QA/UAT

on:
  issue_comment:
    types: [created]

jobs:
  promote-to-qa:
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/tag ')
    runs-on: ubuntu-latest

    steps:
      - name: Get PR details
        id: prdetails
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract PR details
        id: prbranch
        run: |
          source_pr_branch="${{ fromJson(steps.prdetails.outputs.data).head.ref }}"
          target_pr_branch="${{ fromJson(steps.prdetails.outputs.data).base.ref }}"
          pr_commit="${{ fromJson(steps.prdetails.outputs.data).head.sha }}"
          pr_title="${{ fromJson(steps.prdetails.outputs.data).title }}"
          echo "source_pr_branch=$source_pr_branch" >> $GITHUB_ENV
          echo "target_pr_branch=$target_pr_branch" >> $GITHUB_ENV
          echo "pr_title=$pr_title" >> $GITHUB_ENV
          echo "pr_commit=$pr_commit" >> $GITHUB_ENV
          echo "pr_commit=$pr_commit" >> $GITHUB_OUTPUT

      - name: Checkout repo (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Tag Name from comment
        id: tag
        run: |
          comment="${{ github.event.comment.body }}"
          tagname=$(echo "$comment" | awk '{print $2}')
          echo "tagname=$tagname" >> $GITHUB_OUTPUT
          echo "tagname=$tagname" >> $GITHUB_ENV    

      - name: Get latest release tag
        id: prev_release
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | head -n1)
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)  # first commit
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      # 6️⃣ Generate release notes from merge commits
      - name: Generate Release Notes
        run: |
          PREV=${{ steps.prev_release.outputs.prev_tag }}
          NEW=${{ steps.tag.outputs.tagname }}
          SHA=${{ steps.prbranch.outputs.pr_commit }}

          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Get merge commits between PREV and SHA with author
          git log $PREV..$SHA --merges --pretty=format:"%s|%an" | while read line; do
            if [[ "$line" =~ Merge\ pull\ request\ \#([0-9]+)\ (.*)\|(.*) ]]; then
              PR_NUMBER=${BASH_REMATCH[1]}
              PR_TITLE=${BASH_REMATCH[2]}
              PR_AUTHOR=${BASH_REMATCH[3]}
              echo "- $PR_TITLE by @$PR_AUTHOR in #$PR_NUMBER" >> RELEASE_NOTES.md
            fi
          done

          # Fallback if no PRs found
          if ! grep -q "^- " RELEASE_NOTES.md; then
            echo "- No PRs merged since $PREV" >> RELEASE_NOTES.md
          fi

          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV...$NEW" >> RELEASE_NOTES.md

          echo "Final release notes:" && cat RELEASE_NOTES.md

      # - name: Set release notes output
      #   id: release_notes
      #   run: |
      #     body=$(cat RELEASE_NOTES.md)
      #     echo "body<<EOF" >> $GITHUB_OUTPUT
      #     echo "$body" >> $GITHUB_OUTPUT
      #     echo "EOF" >> $GITHUB_OUTPUT    

      # 7️⃣ Create GitHub Release (auto-creates tag)
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tagname }}
          target_commitish: ${{ steps.prbranch.outputs.pr_commit }}
          release_name: ${{ steps.tag.outputs.tagname }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
