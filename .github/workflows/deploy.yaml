name: Promote to QA

on:
  issue_comment:
    types: [created]

permissions:
  contents: write   # needed for tagging + release
  pull-requests: read

jobs:
  promote-to-qa:
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/promote qa')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR info
        id: pr_info
        run: |
          BASE_BRANCH=$(jq -r .pull_request.base.ref < $GITHUB_EVENT_PATH)
          HEAD_BRANCH=$(jq -r .pull_request.head.ref < $GITHUB_EVENT_PATH)
          echo "base=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "head=$HEAD_BRANCH" >> $GITHUB_OUTPUT

      - name: Get latest release tag
        id: prev_release
        run: |
          PREV_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new tag
        id: new_tag
        run: |
          DATE_TAG="v$(date +'%Y.%m.%d').${{ github.run_number }}"
          echo "new_tag=$DATE_TAG" >> $GITHUB_OUTPUT

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag $DATE_TAG
          git push origin $DATE_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Notes
        run: |
          TAG=${{ steps.new_tag.outputs.new_tag }}
          PREV=${{ steps.prev_release.outputs.prev_tag }}
          BASE=${{ steps.pr_info.outputs.base }}
          HEAD=${{ steps.pr_info.outputs.head }}

          echo "# Release $TAG" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## What's Changed" >> RELEASE_NOTES.md

          # List merged PRs with author + number
          gh pr list \
            --state merged \
            --base "$BASE" \
            --json number,title,author \
            --jq '.[] | "\(.title) by @\(.author.login) in #\(.number)"' \
            >> RELEASE_NOTES.md

          echo "" >> RELEASE_NOTES.md
          echo "## Full Changelog" >> RELEASE_NOTES.md
          echo "[Compare Changes](https://github.com/${{ github.repository }}/compare/$PREV...$TAG)" >> RELEASE_NOTES.md

          echo "" >> RELEASE_NOTES.md
          echo "## Contributors" >> RELEASE_NOTES.md
          gh pr list \
            --state merged \
            --base "$BASE" \
            --json author \
            --jq '.[].author.login' | sort -u | sed 's/^/- @/' >> RELEASE_NOTES.md

          echo "" >> RELEASE_NOTES.md
          echo "Final release notes:" && cat RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create ${{ steps.new_tag.outputs.new_tag }} \
            --title "Release ${{ steps.new_tag.outputs.new_tag }}" \
            --notes-file RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to QA
        run: |
          echo "Deploying ${{ steps.new_tag.outputs.new_tag }} to QA..."
          # add your QA deploy steps here
